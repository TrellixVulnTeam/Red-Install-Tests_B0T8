env:
  CIRRUS_SHELL: bash -ileo pipefail

install_red_venv39: &INSTALL_RED_VENV39
  install_red_script: |-
    python3.9 -m venv ~/redenv

    source ~/redenv/bin/activate

    python -m pip install -U pip setuptools wheel
    python -m pip install -U "$RED_PACKAGE_NAME"

    ./check_java_version.py 11
install_pyenv_and_red: &INSTALL_PYENV_AND_RED
  install_pyenv_script: |-
    command -v pyenv && pyenv update || curl https://pyenv.run | bash

    profile=$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))
    rcfile=$([ -n "$ZSH_VERSION" ] && echo ~/.zshrc || echo ~/.bashrc)
    printf '%s\n%s\n%s\n' 'export PYENV_ROOT="$HOME/.pyenv"' 'export PATH="$PYENV_ROOT/bin:$PATH"' "$([ -f "$profile" ] && cat "$profile")" > "$profile"
    echo 'eval "$(pyenv init --path)"' >> "$profile"
    echo 'eval "$(pyenv init -)"' >> "$rcfile"
    echo 'eval "$(pyenv virtualenv-init -)"' >> "$rcfile"
  install_python_with_pyenv_script: |-
    CONFIGURE_OPTS=--enable-optimizations pyenv install 3.9.13 -v

    pyenv global 3.9.13
  install_red_script: |-
    pyenv virtualenv redbot

    pyenv shell redbot

    python -m pip install -U pip setuptools wheel
    python -m pip install -U "$RED_PACKAGE_NAME"

    ./check_java_version.py 11
install_pyenv_and_red38: &INSTALL_PYENV_AND_RED38
  install_pyenv_script: |-
    command -v pyenv && pyenv update || curl https://pyenv.run | bash

    profile=$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))
    rcfile=$([ -n "$ZSH_VERSION" ] && echo ~/.zshrc || echo ~/.bashrc)
    printf '%s\n%s\n%s\n' 'export PYENV_ROOT="$HOME/.pyenv"' 'export PATH="$PYENV_ROOT/bin:$PATH"' "$([ -f "$profile" ] && cat "$profile")" > "$profile"
    echo 'eval "$(pyenv init --path)"' >> "$profile"
    echo 'eval "$(pyenv init -)"' >> "$rcfile"
    echo 'eval "$(pyenv virtualenv-init -)"' >> "$rcfile"
  install_python_with_pyenv_script: |-
    CONFIGURE_OPTS=--enable-optimizations pyenv install 3.8.12 -v

    pyenv global 3.8.12
  install_red_script: |-
    pyenv virtualenv redbot

    pyenv shell redbot

    python -m pip install -U pip setuptools wheel
    python -m pip install -U "$RED_PACKAGE_NAME"

    ./check_java_version.py 11

install_red_on_rhel8_derivatives: &INSTALL_RED_ON_RHEL8_DERIVATIVES
  install_instructions_script: |-
    sudo dnf -y update
    sudo dnf -y group install development
    sudo dnf -y install python39 python39-pip python39-devel java-11-openjdk-headless nano git

    sudo alternatives --set java "java-11-openjdk.$(uname -i)"
  <<: *INSTALL_RED_VENV39
install_red_on_rhel9_derivatives: &INSTALL_RED_ON_RHEL9_DERIVATIVES
  install_instructions_script: |-
    sudo dnf -y install python39 git java-11-openjdk-headless @development nano
  <<: *INSTALL_RED_VENV39
install_red_on_opensuse_leap_15: &INSTALL_RED_ON_OPENSUSE_LEAP_15
  install_instructions_script: |-
    sudo zypper -n install python39-base python39-pip git-core java-11-openjdk-headless nano
    sudo zypper -n install -t pattern devel_basis
  <<: *INSTALL_RED_VENV39


macos_catalina_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
  install_instructions_script: |-
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    brew install python@3.9
    brew install git
    brew tap homebrew/cask-versions
    brew install --cask temurin11

    profile=$([ -n "$ZSH_VERSION" ] && echo ~/.zprofile || ([ -f ~/.bash_profile ] && echo ~/.bash_profile || echo ~/.profile))
    echo 'export PATH="$(brew --prefix)/opt/python@3.9/bin:$PATH"' >> "$profile"
    source "$profile"
  <<: *INSTALL_RED_VENV39

windows_task:
  compute_engine_instance:
    image_project: windows-cloud
    image: family/windows-2022-core
    platform: windows
  env:
    CIRRUS_SHELL: cmd.exe
  install_instructions_script:
    # `ps:` doesn't include $ErrorActionPreference so gotta add it manually
    - ps: |-
        $ErrorActionPreference = "Stop"
        $ProgressPreference = "SilentlyContinue"

        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        # v-- stop log spam by disabling download progress (not part of instructions)
        choco feature disable -n=showDownloadProgress
        # ^-- stop log spam by disabling download progress (not part of instructions)
        choco upgrade git --params "/GitOnlyOnPath /WindowsTerminal" -y
        choco upgrade visualstudio2022-workload-vctools -y
        choco upgrade python3 -y --version 3.9.13

        choco upgrade temurin11 -y --version 11.0.14.10100
  # Exit code detection in Windows cmd scripts only works when using a list.
  # The list of a single script instruction is still put in a single .cmd file
  # so all commands on a single list run in the same environment.
  refresh_path_script:
    - C:\ProgramData\chocolatey\bin\RefreshEnv.cmd
    - echo PATH=%PATH% >> "%CIRRUS_ENV%"
  install_red_script:
    - py -3.9 -m venv "%userprofile%\redenv"

    - '"%userprofile%\redenv\Scripts\activate.bat"'

    - python -m pip install -U pip setuptools wheel
    - python -m pip install -U "%RED_PACKAGE_NAME%"

almalinux_8_task:
  compute_engine_instance:
    image_project: almalinux-cloud
    image: family/almalinux-8
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
almalinux_9_task:
  # FIXME: switch to compute_engine_instance once the image is available
  container:
    image: almalinux:9
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    dnf -y install sudo
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

archlinux_task:
  compute_engine_instance:
    image_project: arch-linux-gce
    image: family/arch
    # For some reason, this image doesn't work with only one core assigned to it.
    cpu: 2
    memory: 2G
  # makepkg can't be ran as root so we need to create builduser first
  create_builduser_script: |-
    useradd builduser -m
    passwd -d builduser
    printf 'builduser ALL=(ALL) ALL\n' | tee -a /etc/sudoers
  install_instructions_script: |-
    sudo pacman --noconfirm -Syu git jre11-openjdk-headless base-devel nano

    sudo -u builduser git clone https://aur.archlinux.org/python39.git /tmp/python39
    cd /tmp/python39
    sudo -u builduser makepkg --noconfirm -sicL
    cd -
    rm -rf /tmp/python39
  <<: *INSTALL_RED_VENV39

centos_7_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-7
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo yum -y groupinstall development
    sudo yum -y install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel tk-devel libffi-devel findutils java-11-openjdk-headless nano

    sudo yum -y install centos-release-scl
    sudo yum -y install devtoolset-8-gcc devtoolset-8-gcc-c++
    echo "source scl_source enable devtoolset-8" >> ~/.bashrc
    # this fails? but it's going to run later anyway and then it works...
    #
    # source ~/.bashrc

    sudo yum -y install https://repo.ius.io/ius-release-el7.rpm
    sudo yum -y swap git git236
  <<: *INSTALL_PYENV_AND_RED

centos_stream_8_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-stream-8
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES
centos_stream_9_task:
  compute_engine_instance:
    image_project: centos-cloud
    image: family/centos-stream-9
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL9_DERIVATIVES

debian_10_buster_task:
  compute_engine_instance:
    image_project: debian-cloud
    image: family/debian-10
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless nano
  env:
    CXX: /usr/bin/g++
  <<: *INSTALL_PYENV_AND_RED
debian_11_bullseye_task:
  compute_engine_instance:
    image_project: debian-cloud
    image: family/debian-11
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv python3-pip git openjdk-11-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39

fedora_35_task:
  compute_engine_instance:
    image_project: fedora-cloud
    image: family/fedora-cloud-35
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo dnf -y install python39 git java-11-openjdk-headless @development-tools nano
  <<: *INSTALL_RED_VENV39
fedora_36_task:
  container:
    image: fedora:36
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    dnf -y install sudo
  install_instructions_script: |-
    sudo dnf -y install python39 git java-11-openjdk-headless @development-tools nano
  <<: *INSTALL_RED_VENV39

opensuse_leap_15_3_task:
  compute_engine_instance:
    image_project: opensuse-cloud
    image: opensuse-leap-15-3-v20220429-x86-64
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_OPENSUSE_LEAP_15
opensuse_leap_15_4_task:
  container:
    image: opensuse/leap:15.4
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    zypper -n install sudo
  <<: *INSTALL_RED_ON_OPENSUSE_LEAP_15
opensuse_tumbleweed_task:
  container:
    image: opensuse/tumbleweed:latest
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    zypper -n install sudo
  install_instructions_script: |-
    sudo zypper -n install python39-base python39-pip git-core java-11-openjdk-headless nano
    sudo zypper -n install -t pattern devel_basis
  <<: *INSTALL_RED_VENV39

oracle_linux_8_task:
  container:
    image: oraclelinux:8
    cpu: 1
    memory: 2G
  install_sudo_script: |-
    dnf -y install sudo
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES

raspberry_pi_os_10_armhf_task:
  arm_container:
    image: lpenz/rpios-buster-armhf
    cpu: 1
    # Python build with pyenv sometimes OOMs with 1GB of RAM
    memory: 1536M
  install_sudo_script: |-
    apt -y install sudo
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless nano
  env:
    CXX: /usr/bin/g++
  <<: *INSTALL_PYENV_AND_RED38
raspberry_pi_os_11_armhf_task: &RASPBERRY_PI_OS_11
  arm_container:
    image: lpenz/rpios-bullseye-armhf
    cpu: 1
    memory: 1G
  install_sudo_script: |-
    apt -y install sudo
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install python3 python3-dev python3-venv python3-pip git openjdk-11-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
raspberry_pi_os_11_aarch64_task:
  <<: *RASPBERRY_PI_OS_11
  arm_container:
    image: lpenz/rpios-bullseye-arm64
    cpu: 1
    memory: 1G

rocky_linux_8_task:
  compute_engine_instance:
    image_project: rocky-linux-cloud
    image: family/rocky-linux-8
    cpu: 1
    memory: 2G
  <<: *INSTALL_RED_ON_RHEL8_DERIVATIVES

ubuntu_1804_bionic_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-1804-lts
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install software-properties-common
    sudo add-apt-repository -y ppa:git-core/ppa

    sudo add-apt-repository -y ppa:deadsnakes/ppa

    sudo apt -y install python3.9 python3.9-dev python3.9-venv python3-pip git openjdk-11-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
ubuntu_2004_focal_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2004-lts
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install software-properties-common
    sudo add-apt-repository -y ppa:git-core/ppa

    sudo apt -y install python3.9 python3.9-dev python3.9-venv python3-pip git openjdk-11-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
ubuntu_2110_rolling_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2110
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install software-properties-common
    sudo add-apt-repository -yu ppa:git-core/ppa

    sudo apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev libgdbm-dev uuid-dev python3-openssl git openjdk-11-jre-headless nano
  env:
    CXX: /usr/bin/g++
  <<: *INSTALL_PYENV_AND_RED
ubuntu_2204_jammy_task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2204-lts
    cpu: 1
    memory: 2G
  install_instructions_script: |-
    sudo apt update
    sudo apt -y install software-properties-common
    sudo add-apt-repository -y ppa:deadsnakes/ppa

    sudo apt -y install python3.9 python3.9-dev python3.9-venv python3-pip git openjdk-11-jre-headless build-essential nano
  <<: *INSTALL_RED_VENV39
